{"type": "Fill in the Blanks", "questions": [{"question": "The _________ pattern promotes loose coupling and flexibility in object creation.", "answer": "Factory and Abstract Factory"}, {"question": "Client code should depend on _________ rather than concrete classes.", "answer": "interfaces"}, {"question": "The code may become more complicated due to the introduction of many new _________ and classes.", "answer": "interfaces"}, {"question": "The _________ Principle allows you to introduce new variants of products without breaking existing client code.", "answer": "Open/Closed"}, {"question": "The Abstract Factory Pattern provides an interface for creating families of _________ or dependent objects.", "answer": "related"}, {"question": "In the Abstract Factory Pattern, concrete subclasses implement the abstract classes to produce specific instances of _________ objects.", "answer": "related"}, {"question": "The pattern promotes the creation of consistent object _________, ensuring compatibility between objects.", "answer": "families"}, {"question": "The Abstract Factory Pattern allows for easy interchangeability of entire _________ of objects.", "answer": "families"}, {"question": "The Abstract Factory Pattern is a _________ design pattern.", "answer": "creational"}, {"question": "Extracting the product creation code into one place makes the code easier to _________.", "answer": "support"}]}