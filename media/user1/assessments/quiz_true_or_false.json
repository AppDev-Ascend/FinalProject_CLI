{"type": "True or False", "questions": [{"question": "The Abstract Factory Pattern is a structural design pattern", "answer": "False"}, {"question": "The Abstract Factory Pattern allows for easy interchangeability of entire families of objects", "answer": "True"}, {"question": "The Abstract Factory Pattern ensures compatibility between objects within a family", "answer": "True"}, {"question": "The Abstract Factory Pattern is used to create unrelated objects", "answer": "False"}, {"question": "The Abstract Factory Pattern can introduce new variants of products without affecting existing client code", "answer": "True"}, {"question": "The Abstract Factory Pattern makes the code simpler by reducing the number of interfaces and classes", "answer": "False"}, {"question": "The Abstract Factory Pattern involves creating abstract classes for object creation", "answer": "True"}, {"question": "Concrete subclasses are not necessary in the Abstract Factory Pattern", "answer": "False"}, {"question": "The Abstract Factory Pattern promotes the creation of consistent object families", "answer": "True"}, {"question": "The Abstract Factory Pattern is particularly useful when the system needs to be dependent on how its objects are created", "answer": "False"}]}