{
    "type": "Exam",
    "sections": [
        {
            "name": "Test 1",
            "type": "Multiple Choice",
            "questions": [
                {
                    "question": "What is the purpose of the Abstract Factory Pattern?",
                    "options": [
                        "To create families of related or dependent objects",
                        "To extract product creation code into one place",
                        "To promote the creation of consistent object families",
                        "To ensure compatibility between objects within a family"
                    ],
                    "answer": 0
                },
                {
                    "question": "What is the benefit of the Abstract Factory Pattern?",
                    "options": [
                        "Easier code support",
                        "Introduction of new variants without breaking existing client code",
                        "Creation of consistent object families",
                        "Easy interchangeability of entire families of objects"
                    ],
                    "answer": 1
                },
                {
                    "question": "What is a potential drawback of the Abstract Factory Pattern?",
                    "options": [
                        "Complicated code",
                        "Introduction of many new interfaces and classes",
                        "Involves creating abstract classes for object creation",
                        "Promotes the creation of consistent object families"
                    ],
                    "answer": 1
                },
                {
                    "question": "What is the Open/Closed Principle?",
                    "options": [
                        "The principle of extracting product creation code into one place",
                        "The principle of introducing new variants without breaking existing client code",
                        "The principle of creating abstract classes for object creation",
                        "The principle of promoting the creation of consistent object families"
                    ],
                    "answer": 1
                },
                {
                    "question": "What is the purpose of the Decorator Pattern?",
                    "options": [
                        "To create families of related or dependent objects",
                        "To extract product creation code into one place",
                        "To promote the creation of consistent object families",
                        "To add new functionality to an existing object dynamically"
                    ],
                    "answer": 3
                }
            ]
        },
        {
            "name": "Test 2",
            "type": "True or False",
            "questions": [
                {
                    "question": "The Abstract Factory Pattern promotes the creation of consistent object families.",
                    "answer": "True"
                },
                {
                    "question": "The Abstract Factory Pattern ensures compatibility between objects within a family.",
                    "answer": "True"
                },
                {
                    "question": "The Abstract Factory Pattern allows for easy interchangeability of entire families of objects.",
                    "answer": "True"
                },
                {
                    "question": "The Abstract Factory Pattern is particularly useful when the system needs to be independent of how its objects are created, composed, and represented.",
                    "answer": "True"
                },
                {
                    "question": "The Abstract Factory Pattern involves creating abstract classes for object creation, with each abstract class representing a family of related objects.",
                    "answer": "True"
                }
            ]
        },
        {
            "name": "Test 3",
            "type": "Essay",
            "questions": [
                {
                    "question": "What is the purpose of the Factory and Abstract Factory Pattern?"
                },
                {
                    "question": "How does the Abstract Factory Pattern promote the creation of consistent object families?"
                },
                {
                    "question": "What are the advantages and disadvantages of using the Abstract Factory Pattern?"
                }
            ]
        },
        {
            "name": "Test 4",
            "type": "Fill in the Blanks",
            "questions": [
                {
                    "question": "______ is a creation design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes.",
                    "answer": "Abstract Factory Pattern"
                },
                {
                    "question": "The Abstract Factory Pattern involves creating abstract classes for object creation, with each abstract class representing a ______ of related objects.",
                    "answer": "family"
                },
                {
                    "question": "Concrete subclasses implement these abstract classes to produce specific instances of the related objects. This pattern promotes the creation of ______ object families.",
                    "answer": "consistent"
                },
                {
                    "question": "The Abstract Factory Pattern ensures compatibility between objects within a family and allows for easy ______ of entire families of objects.",
                    "answer": "interchangeability"
                },
                {
                    "question": "The Abstract Factory Pattern is particularly useful when the system needs to be independent of how its objects are ______, composed, and represented.",
                    "answer": "created"
                }
            ]
        },
        {
            "name": "Test 5",
            "type": "Identification",
            "questions": [
                {
                    "question": "What is the Prototype Design Pattern?",
                    "answer": "A design pattern that involves implementing cloning mechanisms to create new instances based on prototype objects."
                },
                {
                    "question": "How is the Prototype Design Pattern used in software development?",
                    "answer": "It is used to create new instances by copying existing objects."
                },
                {
                    "question": "In which context can the Prototype Design Pattern be used?",
                    "answer": "Game development and graphical user interfaces."
                },
                {
                    "question": "What is one benefit of using the Prototype Design Pattern in game development?",
                    "answer": "Creating new game characters by copying existing character templates."
                },
                {
                    "question": "When working with databases, what can the Prototype Design Pattern be used for?",
                    "answer": "It is not applicable in database operations."
                }
            ]
        }
    ]
}