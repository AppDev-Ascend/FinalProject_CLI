{
    "type": "Multiple Choice",
    "questions": [
        {
            "question": "What is the Prototype Design Pattern?",
            "options": [
                "A pattern that focuses on creating objects by copying an existing object",
                "A pattern that focuses on creating objects using a factory method",
                "A pattern that ensures only one instance of a class is created",
                "A pattern that allows for the creation of new objects with varying functionality"
            ],
            "answer": 1
        },
        {
            "question": "What is the motivation behind using the Prototype Design Pattern?",
            "options": [
                "To reduce the complexity of object initialization",
                "To ensure only one instance of a class is created",
                "To create objects with varying functionality",
                "To efficiently create objects when the cost of creation is high"
            ],
            "answer": 4
        },
        {
            "question": "Which of the following is a participant in the Prototype Design Pattern?",
            "options": [
                "Interface",
                "Factory",
                "Abstract Class",
                "Decorator"
            ],
            "answer": 1
        },
        {
            "question": "What is the main difference between the Prototype Pattern and the Singleton Pattern?",
            "options": [
                "The Singleton Pattern guarantees only one instance of a class is created, while the Prototype Pattern allows for multiple instances",
                "The Prototype Pattern focuses on creating objects by copying an existing object, while the Singleton Pattern focuses on creating a single instance of a class",
                "The Prototype Pattern and Singleton Pattern are the same, just named differently",
                "The Singleton Pattern is a creational design pattern, while the Prototype Pattern is a structural design pattern"
            ],
            "answer": 2
        },
        {
            "question": "How does the Prototype Design Pattern promote flexibility?",
            "options": [
                "By implementing a factory method",
                "By allowing objects to be dynamically created at runtime",
                "By ensuring only one instance of a class is created",
                "By providing an abstract interface for object creation"
            ],
            "answer": 2
        }
    ]
}